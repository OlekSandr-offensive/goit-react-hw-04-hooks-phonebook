{"version":3,"sources":["components/contacts/ContactList.jsx","components/contactForm/ContactForm.jsx","components/filter/Filter.jsx","hooks/useLocalStorage.jsx","App.jsx","index.js"],"names":["ContactList","contacts","onDeleteContacts","className","map","id","name","number","type","onClick","ContactForm","onSubmit","useState","setName","setNumber","handleInputChanged","event","currentTarget","value","reset","preventDefault","pattern","title","onChange","required","Filter","useLocalStorage","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","App","initialContacts","setContacts","filter","setFilter","find","contact","toLowerCase","alert","AddContact","shortid","generate","normalizedFilter","includes","getVisibleContacts","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6818da6.chunk.js","sourcesContent":["import './ContactList.scss';\nimport PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, onDeleteContacts }) => (\n  <ul className=\"ContactList\">\n    {contacts.map(({ id, name, number }) => (\n      <li key={id}>\n        <p>\n          {name}:<span>{number}</span>\n        </p>\n        <button type=\"button\" onClick={() => onDeleteContacts(id)}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import { useState } from 'react';\nimport './ContactForm.scss';\n// import shortid from 'shortid';\nimport PropTypes from 'prop-types';\n\nexport default function ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChanged = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className=\"ContactForm\" onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          value={name}\n          onChange={handleInputChanged}\n          required\n        />\n      </label>\n      <label>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          value={number}\n          onChange={handleInputChanged}\n          required\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n// class OldContactForm extends React.Component {\n//   state = {\n//     id: shortid.generate(),\n//     name: '',\n//     number: '',\n//   };\n\n//   handleInputChanged = event => {\n//     const { name, value } = event.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = event => {\n//     event.preventDefault();\n\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <form className=\"ContactForm\" onSubmit={this.handleSubmit}>\n//         <label>\n//           Name\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             value={this.state.name}\n//             onChange={this.handleInputChanged}\n//             required\n//           />\n//         </label>\n//         <label>\n//           Number\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             value={this.state.number}\n//             onChange={this.handleInputChanged}\n//             required\n//           />\n//         </label>\n//         <button type=\"submit\">Add contact</button>\n//       </form>\n//     );\n//   }\n// }\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n\n// export default ContactForm;\n","import PropTypes from 'prop-types';\nimport './Filter.scss';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <label className=\"Filter\">\n      Find contacts by name\n      <input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nexport default useLocalStorage;\n","import { useState } from 'react';\nimport shortid from 'shortid';\nimport './App.css';\nimport ContactList from './components/contacts/ContactList';\nimport initialContacts from './contacts.json';\nimport ContactForm from './components/contactForm/ContactForm';\nimport Filter from './components/filter/Filter';\nimport useLocalStorage from './hooks/useLocalStorage';\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', initialContacts);\n  const [filter, setFilter] = useState('');\n\n  const FormSubmitHandler = ({ name, number }) => {\n    const findContact = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n    if (findContact) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      const AddContact = {\n        id: shortid.generate(),\n        name: name,\n        number: number,\n      };\n      setContacts(contacts => [AddContact, ...contacts]);\n    }\n  };\n\n  const deleteContacts = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n\n  const changeFilter = event => {\n    setFilter(event.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={FormSubmitHandler} />\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      <ContactList\n        contacts={getVisibleContacts()}\n        onDeleteContacts={deleteContacts}\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}